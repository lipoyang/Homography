#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Apr 09, 2024 12:59:09 PM JST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import Homography_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

class mainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("820x650+10+10")
        top.minsize(120, 1)
        top.maxsize(1924, 1781)
        top.resizable(0,  0)
        top.title("ホモグラフィ変換")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top
        self.checkBorderVal = tk.BooleanVar()

        self.canvasMain = tk.Canvas(self.top)
        self.canvasMain.place(relx=0.012, rely=0.062, relheight=0.923
                , relwidth=0.976)
        self.canvasMain.configure(background="#ffffff")
        self.canvasMain.configure(highlightbackground="#d9d9d9")
        self.canvasMain.configure(highlightcolor="#000000")
        self.canvasMain.configure(insertbackground="#000000")
        self.canvasMain.configure(relief="ridge")
        self.canvasMain.configure(selectbackground="#d9d9d9")
        self.canvasMain.configure(selectforeground="black")

        self.buttonLoad = tk.Button(self.top)
        self.buttonLoad.place(relx=0.012, rely=0.014, height=26, width=47)
        self.buttonLoad.configure(activebackground="#d9d9d9")
        self.buttonLoad.configure(activeforeground="black")
        self.buttonLoad.configure(background="#d9d9d9")
        self.buttonLoad.configure(command=Homography_support.buttonLoad_onClick)
        self.buttonLoad.configure(disabledforeground="#a3a3a3")
        self.buttonLoad.configure(font="-family {Yu Gothic UI} -size 9")
        self.buttonLoad.configure(foreground="#000000")
        self.buttonLoad.configure(highlightbackground="#d9d9d9")
        self.buttonLoad.configure(highlightcolor="#000000")
        self.buttonLoad.configure(text='''Load''')

        self.buttonSave = tk.Button(self.top)
        self.buttonSave.place(relx=0.085, rely=0.014, height=26, width=47)
        self.buttonSave.configure(activebackground="#d9d9d9")
        self.buttonSave.configure(activeforeground="black")
        self.buttonSave.configure(background="#d9d9d9")
        self.buttonSave.configure(command=Homography_support.buttonSave_onClick)
        self.buttonSave.configure(disabledforeground="#a3a3a3")
        self.buttonSave.configure(font="-family {Yu Gothic UI} -size 9")
        self.buttonSave.configure(foreground="#000000")
        self.buttonSave.configure(highlightbackground="#d9d9d9")
        self.buttonSave.configure(highlightcolor="#000000")
        self.buttonSave.configure(text='''Save''')

        self.checkBorder = tk.Checkbutton(self.top)
        self.checkBorder.place(relx=0.159, rely=0.014, relheight=0.037
                , relwidth=0.073)
        self.checkBorder.configure(activebackground="#d9d9d9")
        self.checkBorder.configure(activeforeground="black")
        self.checkBorder.configure(anchor='w')
        self.checkBorder.configure(background="#d9d9d9")
        self.checkBorder.configure(command=Homography_support.checkBorder_onChange)
        self.checkBorder.configure(compound='left')
        self.checkBorder.configure(disabledforeground="#a3a3a3")
        self.checkBorder.configure(font="-family {Yu Gothic UI} -size 9")
        self.checkBorder.configure(foreground="#000000")
        self.checkBorder.configure(highlightbackground="#d9d9d9")
        self.checkBorder.configure(highlightcolor="#000000")
        self.checkBorder.configure(justify='left')
        self.checkBorder.configure(text='''Border''')
        self.checkBorder.configure(variable=self.checkBorderVal)

def start_up():
    Homography_support.main()

if __name__ == '__main__':
    Homography_support.main()
